[{"id":"77fad33.621dcac","type":"tab","label":"Start Flow","disabled":false,"info":""},{"id":"5177b2a6.ba709c","type":"inject","z":"77fad33.621dcac","name":"Voltage Sensor Simulator","topic":"","payload":"{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":"","x":172,"y":43,"wires":[["f62a1fca.031d6"]]},{"id":"f62a1fca.031d6","type":"function","z":"77fad33.621dcac","name":"Voltage data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n    msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nglobal.set('voltages',msg.payload.d.voltage);\nreturn msg;","outputs":1,"noerr":0,"x":162,"y":164,"wires":[["5af9c4cc.704a94"]]},{"id":"5af9c4cc.704a94","type":"function","z":"77fad33.621dcac","name":"zscore","func":"//initialize a list that stores the last n values for the electric current by using the voltage parameter. In stream computing, this list is called a \"sliding window of fixed size.\" \nvar aggwindow = context.get('aggwindow')||[];\n\n//add values to that lis\naggwindow.push(msg.payload.d.voltage); \n\n//Continue adding values to the list until we have exceeded 30 values, which defines the size of our sliding window. \nif (aggwindow.length> 30) {\n    \n    //To compute z-score, we need the mean and the standard deviation.\n    sum = aggwindow.reduce((a,b)=>a+b,0);\n    n = aggwindow.length;\n    mean = sum/n;\n    sd = Math.sqrt(aggwindow.map(x=>Math.pow(mean-x,2)).reduce((a,b)=>a+b,0));\n    \n    // get rid of the oldest element in the list, which resembles a LIFO. \n    aggwindow.shift();\n    \n    //Perform Z-Score Calculation. Add a small value to standard deviation because the standard deviation can become zero, which is mathematically undefined\n    msg.zscore = (mean-msg.payload.d.voltage)/(sd+0.0001)\n}\n\n//store this list to a global context to preserve it over individual message lifetimes\ncontext.set('aggwindow',aggwindow);\n\n\n//output voltage and zscore\nmsg.payload = {\n    [(\"voltage\")]:global.get(\"voltages\"),\n    [(\"zscore\")]:Math.abs(msg.zscore)\n    }\n\nreturn msg;","outputs":1,"noerr":0,"x":331,"y":164,"wires":[["ebe1652f.124bc"]]},{"id":"ebe1652f.124bc","type":"function","z":"77fad33.621dcac","name":"add timestamp","func":"msg.payload.time = new Date().getTime();\nreturn msg;","outputs":1,"noerr":0,"x":523,"y":163,"wires":[["233e6314.6d1a04"]]},{"id":"233e6314.6d1a04","type":"ibmiot out","z":"77fad33.621dcac","authentication":"quickstart","apiKey":"","outputType":"evt","deviceId":"","deviceType":"0.18.3","eventCommandType":"","format":"json","data":"","qos":0,"name":"IBM IoT","service":"quickstart","x":753,"y":160.5,"wires":[]}]